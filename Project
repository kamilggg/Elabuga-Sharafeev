import math
import random

import pygame

width = 360
height = 480
fps = 30
nn = 2


rB = []
mB = []
xB = []
yB = []
aB = []
vB = []
cB = []

for i in range(nn + 1):
    rB.append(50* i)
    mB.append(rB[i] ** 2)
    xB.append(i * 400)
    yB.append(height // 2)
    aB.append(i * math.pi / 3)
    vB.append(2)
    cB.append(0)

pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode((width, height))
clock = pygame.time.Clock()
all_sprites = pygame.sprite.Group()
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QWidget, QApplication, QPushButton, QMainWindow


class Ball(pygame.sprite.Sprite):
    def __init__(self, radius, x, y):
        super().__init__(balls)
        self.radius = radius
        self.image = pygame.Surface((2 * radius, 2 * radius),
                                    pygame.SRCALPHA, 32)
        pygame.draw.circle(self.image, pygame.Color("pink"),
                           (radius, radius), radius)
        self.rect = pygame.Rect(x, y, 2 * radius, 2 * radius)
        self.vx = random.randint(-7, 7)
        self.vy = random.randrange(-7, 7)

    def update(self):
        if self.vx < 0:
            for i in range(-1, -self.vx - 1, -1):
                if self.rect.x - 1 > 10 and (a.rect.x < self.rect.x - 1 < a.rect.x + 70 and
                        a.rect.y < self.rect.y < a.rect.y + 15):
                    self.rect = self.rect.move(-1, 0)
        elif self.vx > 0:
            for i in range(1, self.vx + 1):
                if self.rect.x + 1 < 345 and (a.rect.x < self.rect.x + 1 < a.rect.x + 70 and
                        a.rect.y < self.rect.y < a.rect.y + 15):
                    self.rect = self.rect.move(1, 0)
        if self.vy < 0:
            for i in range(-1, -self.vy - 1, -1):
                if self.rect.y - 1 > 5 and (a.rect.y < self.rect.y - 1 < a.rect.y + 15 and
                        a.rect.x < self.rect.x < a.rect.x + 70):
                    self.rect = self.rect.move(0, -1)
        elif self.vy > 0:
            for i in range(1, self.vy + 1):
                if self.rect.y + 1 < 465 and (a.rect.y < self.rect.y + 1 < a.rect.y + 15 and
                        a.rect.x < self.rect.x < a.rect.x + 70):
                    self.rect = self.rect.move(0, -1)
        if pygame.sprite.spritecollideany(self, horizontal_borders):
            self.vy = -self.vy
        if pygame.sprite.spritecollideany(self, vertical_borders):
            self.vx = -self.vx

        self.rect = self.rect.move(self.vx, self.vy)
        if pygame.sprite.spritecollideany(self, bricks):
            y_v = 1 if self.vy > 0 else -1
            x_v = 1 if self.vx > 0 else -1
            self.vx = random.randrange(-1 * x_v, -7 * x_v, -x_v)
            self.vy = random.randrange(-1 * y_v, -7 * y_v, -y_v)


class Brick(pygame.sprite.Sprite):
    def __init__(self, radius, x, y):
        super().__init__(bricks)
        self.w = 20
        self.h = 10
        self.image = pygame.Surface((self.w, self.h), pygame.SRCALPHA, 32)
        self.image.fill((255, 0, 255))
        self.rect = pygame.Rect(x, y, 1 * radius, 1 * radius)

    def update(self):
        if pygame.sprite.spritecollideany(self, balls):
            self.kill()


horizontal_borders = pygame.sprite.Group()
vertical_borders = pygame.sprite.Group()
balls = pygame.sprite.Group()
bricks = pygame.sprite.Group()


class Border(pygame.sprite.Sprite):
    def __init__(self, x1, y1, x2, y2):
        super().__init__(all_sprites)
        if x1 == x2:
            self.add(vertical_borders)
            self.image = pygame.Surface([1, y2 - y1])
            self.rect = pygame.Rect(x1, y1, 1, y2 - y1)
        else:
            self.add(horizontal_borders)
            self.image = pygame.Surface([x2 - x1, 1])
            self.rect = pygame.Rect(x1, y1, x2 - x1, 1)


class Platform(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__(bricks)
        self.w = 70
        self.h = 15
        self.image = pygame.Surface((self.w, self.h))
        self.image.fill((0, 255, 0))
        self.rect = pygame.Rect(150, 400, 70, 15)

    def updat(self, x, y):
        self.rect.x = x
        self.rect.y = y


Border(5, 5, width - 5, 5)
Border(5, height - 5, width - 5, height - 5)
Border(5, 5, 5, height - 5)
Border(width - 5, 5, width - 5, height - 5)
right, up = 0, 0
for i in range(10):
    for l in range(10):
        Brick(20, i * 30 + 35, l * 20 + 20)

Ball(10, 160, 400)
x, y = 150, 400
x_old, y_old, x_new, y_new = 0, 0, 0, 0
running = True
a = Platform()
moving = False
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            quit()
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            if x < event.pos[0] < x + 100 and y < event.pos[1] < y + 100:
                moving = True
        if event.type == pygame.MOUSEMOTION:
            if moving:
                x_new, y_new = event.rel
                x, y = x + x_new, y + y_new
        if event.type == pygame.MOUSEBUTTONUP and event.button == 1:
            moving = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RIGHT:
                right = 7
            if event.key == pygame.K_LEFT:
                right = -7
            if event.key == pygame.K_UP:
                up = -7
            if event.key == pygame.K_DOWN:
                up = 7

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_RIGHT:
                right = 0
            if event.key == pygame.K_LEFT:
                right = 0
            if event.key == pygame.K_UP:
                up = 0
            if event.key == pygame.K_DOWN:
                up = 0
    x += right
    y += up
    if x < 5:
        x = 5
    if x + 70 > 355:
        x = 355 - 70
    if y < 5:
        y = 5
    if y + 15 > 475:
        y = 460


    a.updat(x, y)
    screen.fill(pygame.Color('white'))
    all_sprites.update()
    all_sprites.draw(screen)
    bricks.update()
    bricks.draw(screen)
    balls.update()
    balls.draw(screen)
    pygame.draw.rect(screen, (0, 255, 0), (x, y, 70, 15))
    pygame.display.flip()
    clock.tick(fps)
